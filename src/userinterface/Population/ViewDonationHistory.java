/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Population;

import Business.EcoSystem;
import Business.Population.DonorTransaction;
import Business.Population.Person;
import Business.Population.PersonDirectory;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author neeraja
 */
public class ViewDonationHistory extends javax.swing.JPanel {

    /**
     * Creates new form ViewDonationHistory
     */
    PersonDirectory personDirectory;
    public ViewDonationHistory( PersonDirectory personDirectory) {
        this.personDirectory = personDirectory;
        initComponents();
        
        viewDonationHist();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        donorTable = new javax.swing.JTable();
        btnUpdateDonor = new javax.swing.JButton();
        btnDeleteDonor = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        donorTrnTable = new javax.swing.JTable();
        btnUpdateTrn = new javax.swing.JButton();
        btnDeleteTrn = new javax.swing.JButton();
        donorLbl = new javax.swing.JLabel();
        trnLbl = new javax.swing.JLabel();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        donorTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        donorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "ID", "Name", "Email", "Phone Number", "Blood Group"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        donorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                donorTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(donorTable);
        if (donorTable.getColumnModel().getColumnCount() > 0) {
            donorTable.getColumnModel().getColumn(0).setMinWidth(1);
            donorTable.getColumnModel().getColumn(0).setPreferredWidth(1);
            donorTable.getColumnModel().getColumn(0).setMaxWidth(1);
        }

        btnUpdateDonor.setText("Update");
        btnUpdateDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDonorActionPerformed(evt);
            }
        });

        btnDeleteDonor.setText("Delete");
        btnDeleteDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDonorActionPerformed(evt);
            }
        });

        jLabel2.setText("View Donation History");

        donorTrnTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        donorTrnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Age", "Weight", "Height", "Hemoglobin Level", "Blood Last Donated Date", "Blood Donation Date", "Number of Units", "Other Diseases", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(donorTrnTable);
        if (donorTrnTable.getColumnModel().getColumnCount() > 0) {
            donorTrnTable.getColumnModel().getColumn(0).setMinWidth(1);
            donorTrnTable.getColumnModel().getColumn(0).setPreferredWidth(1);
            donorTrnTable.getColumnModel().getColumn(0).setMaxWidth(1);
        }

        btnUpdateTrn.setText("Update");
        btnUpdateTrn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTrnActionPerformed(evt);
            }
        });

        btnDeleteTrn.setText("Delete");
        btnDeleteTrn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTrnActionPerformed(evt);
            }
        });

        donorLbl.setText("Donor Details:");

        trnLbl.setText("Transaction Details:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1157, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1163, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(donorLbl)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(929, Short.MAX_VALUE)
                .addComponent(btnUpdateDonor)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteDonor)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnUpdateTrn)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteTrn)
                .addGap(48, 48, 48))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(trnLbl))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addGap(31, 31, 31)
                .addComponent(donorLbl)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateDonor)
                    .addComponent(btnDeleteDonor))
                .addGap(29, 29, 29)
                .addComponent(trnLbl)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateTrn)
                    .addComponent(btnDeleteTrn))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void donorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donorTableMouseClicked
        // TODO add your handling code here:
        System.out.println("Table row clicked");
        DefaultTableModel model = (DefaultTableModel) donorTrnTable.getModel();

        JTable target = (JTable) evt.getSource();
        int row = target.getSelectedRow(); // select a row
        Person person = (Person) donorTable.getValueAt(row, 0);
        List<DonorTransaction> transaction = person.getDonorTransaction();
        model.setRowCount(0);
        String bloodGroup = person.getBloodGroup();
        for (DonorTransaction data : transaction) {
            Object[] rowTrn = new Object[10];
            //row[0] = ++index;

            rowTrn[0] = data;
            rowTrn[1] = data.getAge();
            rowTrn[2] = data.getWeight();
            rowTrn[3] = data.getHeight();
            rowTrn[4] = data.getHblevel();
            rowTrn[5] = data.getBloodLastDonatedDate();
            rowTrn[6] = data.getBloodDonationDate();
            rowTrn[7] = data.getNumberOfUnits();
            rowTrn[8] = data.isOtherDiseases();
            rowTrn[9] = data.getPrice();

            model.addRow(rowTrn);
        }
    }//GEN-LAST:event_donorTableMouseClicked

    private void btnUpdateDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDonorActionPerformed
        // TODO add your handling code here:
        //System.out.println("ui.ViewPatients.patientUpdBtnActionPerformed()");
        DefaultTableModel model = (DefaultTableModel) donorTable.getModel();
        int rowIndex = donorTable.getSelectedRow();
        int colIndex = 0;
        int colIndex1 = donorTable.getSelectedColumn();

        Vector dataVector = model.getDataVector();
        Vector elementAt = (Vector) dataVector.elementAt(rowIndex);
        Person personDetails = null;
        if (colIndex1 == 0) {
            personDetails = personDirectory.getPersonList().stream().filter(item -> elementAt.get(0).equals(item.getId())).findFirst().orElse(null);
        }
        Person person = (Person) model.getValueAt(rowIndex, colIndex);
        if (!elementAt.get(1).toString().isEmpty() && !elementAt.get(2).toString().isEmpty() && !elementAt.get(3).toString().isEmpty() 
                && !elementAt.get(4).toString().isEmpty() && !elementAt.get(5).toString().isEmpty()) {

            try {
                if (personDetails == null) {
                    person.setId(Integer.parseInt(elementAt.get(1).toString()));
                    person.setName(elementAt.get(2).toString());
                    person.setEmail(elementAt.get(3).toString());
                    person.setPhoneNum(Long.parseLong(elementAt.get(4).toString()));
                    person.setBloodGroup(elementAt.get(4).toString());
                    

                    JOptionPane.showMessageDialog(this, "Value updated successfully!");

                } else {
                    JOptionPane.showMessageDialog(this, "Patient with given id already exists!");
                }
            } catch (NumberFormatException | NullPointerException exception) {

                JOptionPane.showMessageDialog(this, "Please enter all values.");

            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter all values.");
        }

    }//GEN-LAST:event_btnUpdateDonorActionPerformed

    private void btnDeleteDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDonorActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = donorTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) donorTable.getModel();
        Person person = (Person) model.getValueAt(selectedRowIndex, 0);
        personDirectory.removePerson(person);
        DefaultTableModel modelTrn = (DefaultTableModel) donorTrnTable.getModel();
        modelTrn.setRowCount(0);
        viewDonationHist();
        JOptionPane.showMessageDialog(this, "Donor Details deleted");
    }//GEN-LAST:event_btnDeleteDonorActionPerformed

    private void btnUpdateTrnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTrnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) donorTable.getModel();
        DefaultTableModel modelTrn = (DefaultTableModel) donorTrnTable.getModel();
        int rowIndex = donorTable.getSelectedRow();
        int colIndex = 0;
        int rowIndexTrn = donorTrnTable.getSelectedRow();
        int colIndexTrn = donorTrnTable.getSelectedColumn();

        Vector dataVector = modelTrn.getDataVector();
        Vector elementAt = (Vector) dataVector.elementAt(rowIndexTrn);

        Vector dataVectorDonor = model.getDataVector();
        Vector elementAtDonor = (Vector) dataVectorDonor.elementAt(rowIndex);

        Person personDetails = personDirectory.getPersonList().stream().filter(item -> Integer.parseInt(elementAtDonor.get(1).toString()) == item.getId()).findFirst().orElse(null);

       // Encounter encounter = (Encounter) model.getValueAt(rowIndexVitals, colIndex);
        if (personDetails != null ) {
            
            DonorTransaction donorT = personDetails.getDonorTransaction().get(rowIndexTrn);
            
            Date donoatedDt = new Date(elementAt.get(6).toString());
            Date lastDonatedDt = new Date(elementAt.get(5).toString());
            
            donorT.setAge(Integer.parseInt(elementAt.get(1).toString()));
            donorT.setWeight(Float.parseFloat(elementAt.get(2).toString()));
            donorT.setHeight(Float.parseFloat(elementAt.get(3).toString()));
            donorT.setHblevel(Float.parseFloat(elementAt.get(4).toString()));
            donorT.setBloodDonationDate(donoatedDt);
            donorT.setBloodLastDonatedDate(lastDonatedDt);
            donorT.setNumberOfUnits(Integer.parseInt(elementAt.get(7).toString()));
            donorT.setOtherDiseases(Boolean.parseBoolean(elementAt.get(8).toString()));
            donorT.setOtherDiseases(Boolean.parseBoolean(elementAt.get(9).toString()));
            
            JOptionPane.showMessageDialog(this, "Value updated successfully!");

        }
    }//GEN-LAST:event_btnUpdateTrnActionPerformed

    private void btnDeleteTrnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTrnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = donorTrnTable.getSelectedRow();

        // Selected patient
        int selectedRowIndexDonor = donorTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) donorTable.getModel();
        Person person = (Person) model.getValueAt(selectedRowIndexDonor, 0);

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        DefaultTableModel modelTrn = (DefaultTableModel) donorTrnTable.getModel();
        DonorTransaction donorTransaction = (DonorTransaction) modelTrn.getValueAt(selectedRowIndex, 0);
        person.removeDonorTransaction(donorTransaction);
        modelTrn.removeRow(selectedRowIndex);
        JOptionPane.showMessageDialog(this, "Patient vitals deleted");
    }//GEN-LAST:event_btnDeleteTrnActionPerformed
/***
***/
    private void viewDonationHist(){
        DefaultTableModel model = (DefaultTableModel) donorTable.getModel();
        List<Person> person = EcoSystem.getInstance().getPersonDirectory().getPersonList();
        model.setRowCount(0);
        for (Person data : person) {
            Object[] row = new Object[6];
            //row[0] = ++index;

            row[0] = data;
            row[1] = data.getId();
            row[2] = data.getName();
            row[3] = data.getEmail();
            row[4] = data.getPhoneNum();
            row[5] = data.getBloodGroup();
           
            model.addRow(row);

        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteDonor;
    private javax.swing.JButton btnDeleteTrn;
    private javax.swing.JButton btnUpdateDonor;
    private javax.swing.JButton btnUpdateTrn;
    private javax.swing.JLabel donorLbl;
    private javax.swing.JTable donorTable;
    private javax.swing.JTable donorTrnTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel trnLbl;
    // End of variables declaration//GEN-END:variables
}
