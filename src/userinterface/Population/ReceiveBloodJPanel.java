/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Population;

import Business.EcoSystem;
import Business.Population.Person;
import Business.Population.ReceiverTransaction;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author neeraja
 */
public class ReceiveBloodJPanel extends javax.swing.JPanel {
    
    String loggedInUser;
    /**
     * Creates new form ReceiveBloodJPanel
     */
    public ReceiveBloodJPanel(String loggedInUser) {
        this.loggedInUser = loggedInUser;
        initComponents();
        addListeners();
        populateInitialValues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        receiverLbl = new javax.swing.JLabel();
        phoneNumberLbl = new javax.swing.JLabel();
        bloodGrpLbl = new javax.swing.JLabel();
        unitsLbl = new javax.swing.JLabel();
        orgNameLbl = new javax.swing.JLabel();
        receiverTxt = new javax.swing.JTextField();
        phoneNumberTxt = new javax.swing.JTextField();
        bloodGrpTxt = new javax.swing.JTextField();
        unitsTxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        hbLvl = new javax.swing.JLabel();
        hbTxt = new javax.swing.JTextField();
        emailLbl = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        orgCombo = new javax.swing.JComboBox<>();
        ageTxt = new javax.swing.JTextField();
        heightTxt = new javax.swing.JTextField();
        weightTxt = new javax.swing.JTextField();
        ageLbl = new javax.swing.JLabel();
        heightLbl = new javax.swing.JLabel();
        weightLbl = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Request Blood");

        receiverLbl.setText("Receiver Name:");

        phoneNumberLbl.setText("Receiver Phone Number:");

        bloodGrpLbl.setText("Blood Group:");

        unitsLbl.setText("Number of Units:");

        orgNameLbl.setText("Organization Name:");

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        hbLvl.setText("Hemoglobin Level:");

        emailLbl.setText("Email:");

        orgCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ageLbl.setText("Age:");

        heightLbl.setText("Height:");

        weightLbl.setText("Weight:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(357, 357, 357))
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(receiverLbl)
                            .addComponent(phoneNumberLbl))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(receiverTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(phoneNumberTxt)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bloodGrpLbl)
                                .addComponent(unitsLbl)
                                .addComponent(orgNameLbl)
                                .addComponent(hbLvl)
                                .addComponent(emailLbl)
                                .addComponent(ageLbl)
                                .addComponent(heightLbl))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(weightLbl)
                                .addGap(79, 79, 79)))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bloodGrpTxt)
                            .addComponent(unitsTxt)
                            .addComponent(hbTxt)
                            .addComponent(orgCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ageTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(heightTxt)
                                    .addComponent(weightTxt)
                                    .addComponent(emailTxt))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(390, 390, 390))
            .addGroup(layout.createSequentialGroup()
                .addGap(432, 432, 432)
                .addComponent(saveBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receiverLbl)
                    .addComponent(receiverTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneNumberLbl)
                    .addComponent(phoneNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLbl)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ageLbl)
                    .addComponent(ageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(heightLbl)
                    .addComponent(heightTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightLbl)
                    .addComponent(weightTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodGrpLbl)
                    .addComponent(bloodGrpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hbLvl)
                    .addComponent(hbTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitsLbl)
                    .addComponent(unitsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orgNameLbl)
                    .addComponent(orgCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(saveBtn)
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void populateInitialValues(){
        Person person = EcoSystem.getInstance().getPersonDirectory().getPersonByUsername(loggedInUser);
        String name = person.getName();
        String email = person.getEmail();
        long phoneNum = person.getPhoneNum();
        receiverTxt.setText(name);
        phoneNumberTxt.setText(String.valueOf(phoneNum));
        emailTxt.setText(String.valueOf(phoneNum));
    }
    
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        if (!receiverTxt.getText().isEmpty() && !bloodGrpTxt.getText().isEmpty()
            && !phoneNumberTxt.getText().isEmpty() && !hbLvl.getText().isEmpty() && !unitsTxt.getText().isEmpty()
            && orgCombo.getSelectedItem()!= null && !emailTxt.getText().isEmpty()) {
         
            Person person = EcoSystem.getInstance().getPersonDirectory().getPersonByPhoneNum(Long.parseLong(phoneNumberTxt.getText()));
            
            ReceiverTransaction rt = person.addNewReceiverTransaction();
            rt.setHblevel(Float.parseFloat(hbTxt.getText()));
            rt.setNumberOfUnits(Integer.parseInt(unitsTxt.getText()));
            rt.setAge(Integer.parseInt(ageTxt.getText()));
            rt.setHeight(Float.parseFloat(heightTxt.getText()));
            rt.setWeight(Float.parseFloat(weightTxt.getText()));
            person.setBloodGroup(bloodGrpTxt.getText());
            String org = (String) orgCombo.getSelectedItem();
            rt.setOrganizationName(org);
           
//            person.setName(donorTxt.getText());
//            person.setEmail(emailTxt.getText());
//            
            
          
            JOptionPane.showMessageDialog(this, "Added donor details to the system");
        } else {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty");

        }
    }//GEN-LAST:event_saveBtnActionPerformed
          /**
     * Function to validate number input. To check if text fields contain any
     * alphabets.
     */
    void validateNumberInput(DocumentEvent e) {
        String charRegex = ".*[a-zA-z].*";
        int length = e.getDocument().getLength();
        try {
            String text = e.getDocument().getText(0, length);
            if (text.matches(charRegex)) {
                JOptionPane.showMessageDialog(this, "Characters are not allowed in Number field!");

            }
        } catch (BadLocationException ex) {
        }
    }

    /**
     * Function to validate input length.
     */
    void validateInputLength(DocumentEvent e, int len) {
        String charRegex = ".{" + len + "}";
        int length = e.getDocument().getLength();
        try {
            String text = e.getDocument().getText(0, length);
            if (text.matches(charRegex)) {
                JOptionPane.showMessageDialog(this, "Maximum characters allowed: " + (len - 1));

            }
        } catch (BadLocationException ex) {
        }
    }

    /**
     * Function to validate email input. To check if text fields contain any
     * special characters.
     */
    void validateEmailInput(String email) {
        String charRegex = ".*@[a-z]+\\.[a-z]+";

        System.out.println(email);
        if (!email.matches(charRegex)) {
            JOptionPane.showMessageDialog(this, "Email is not proper format!");

        }

    }

    /**
     * Function to validate text input. To check if text fields contain any
     * special characters.
     */
    void validateSpecialInput(DocumentEvent e) {
        String charRegex = ".*[./\\$)(?*%@].*";
        int length = e.getDocument().getLength();
        try {
            String text = e.getDocument().getText(0, length);
            if (text.matches(charRegex)) {
                JOptionPane.showMessageDialog(this, "Special characters are not allowed!");

            }
        } catch (BadLocationException ex) {
        }
    }

    /**
     * Function to validate text input. To check if text fields contain any
     * digits.
     */
    void validateTextInput(DocumentEvent e) {
        String digitRegex = ".*\\d.*";
        int length = e.getDocument().getLength();
        try {
            String text = e.getDocument().getText(0, length);
            if (text.matches(digitRegex)) {
                JOptionPane.showMessageDialog(this, "Digits are not allowed in text field!");

            }
        } catch (BadLocationException ex) {
        }
    }
    private void addListeners() {
        bloodGrpTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateTextInput(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateTextInput(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
               validateTextInput(e);
            }

        });

        hbTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                 validateNumberInput(e);
               
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                  validateNumberInput(e);
                
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                  validateNumberInput(e);
                
            }

        });
        unitsTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateNumberInput(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateNumberInput(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validateNumberInput(e);
            }

        });
       
            
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTxt;
    private javax.swing.JLabel bloodGrpLbl;
    private javax.swing.JTextField bloodGrpTxt;
    private javax.swing.JLabel emailLbl;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel hbLvl;
    private javax.swing.JTextField hbTxt;
    private javax.swing.JLabel heightLbl;
    private javax.swing.JTextField heightTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> orgCombo;
    private javax.swing.JLabel orgNameLbl;
    private javax.swing.JLabel phoneNumberLbl;
    private javax.swing.JTextField phoneNumberTxt;
    private javax.swing.JLabel receiverLbl;
    private javax.swing.JTextField receiverTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JLabel unitsLbl;
    private javax.swing.JTextField unitsTxt;
    private javax.swing.JLabel weightLbl;
    private javax.swing.JTextField weightTxt;
    // End of variables declaration//GEN-END:variables
}
