/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.GovernmentRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Government.LicenseDirectory;
import Business.Government.License;
import Business.Government.TrainingDirectory;
import Business.Government.Training;
import Business.Organization.LicenseOrganization;
import Business.Organization.Organizations;
import Business.Organization.TrainingOrganization;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mayan Mishra
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    ViewJPanel viewPanel;
    Training training;
    License license;
    LicenseDirectory licenseDir;
    TrainingDirectory trainingDir;
    Enterprise enterprise;
    EcoSystem ecoSystem;

    public ViewJPanel(Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();

        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;

        populateTableLicense();
        populateTableTraining();
    }

    public ViewJPanel() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLicense = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTraining = new javax.swing.JTable();
        btnDeleteTraining = new javax.swing.JButton();
        btnDeleteLicense = new javax.swing.JButton();
        btnUpdateLicense = new javax.swing.JButton();
        btnUpdateTraining = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(853, 647));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblLicense.setBackground(new java.awt.Color(255, 204, 204));
        tblLicense.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "License Id", "License Number", "License Name", "Issue Date", "Expiry Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLicense);
        if (tblLicense.getColumnModel().getColumnCount() > 0) {
            tblLicense.getColumnModel().getColumn(0).setMinWidth(1);
            tblLicense.getColumnModel().getColumn(0).setPreferredWidth(1);
            tblLicense.getColumnModel().getColumn(0).setMaxWidth(1);
        }

        tblTraining.setBackground(new java.awt.Color(255, 204, 204));
        tblTraining.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Patient Identity", "Cross Matching", "Compatibility", "Problems", "Trouble Shooting", "Issue of Blood", "Reactions", "Bag Disposal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTraining);
        if (tblTraining.getColumnModel().getColumnCount() > 0) {
            tblTraining.getColumnModel().getColumn(0).setMinWidth(1);
            tblTraining.getColumnModel().getColumn(0).setPreferredWidth(1);
            tblTraining.getColumnModel().getColumn(0).setMaxWidth(1);
        }

        btnDeleteTraining.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDeleteTraining.setText("Delete");
        btnDeleteTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTrainingActionPerformed(evt);
            }
        });

        btnDeleteLicense.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDeleteLicense.setText("Delete");
        btnDeleteLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteLicenseActionPerformed(evt);
            }
        });

        btnUpdateLicense.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdateLicense.setText("Update");
        btnUpdateLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateLicenseActionPerformed(evt);
            }
        });

        btnUpdateTraining.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdateTraining.setText("Update");
        btnUpdateTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTrainingActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("Training");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel2.setText("License");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BB6.png"))); // NOI18N

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BB6.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDeleteTraining)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateTraining)
                        .addGap(66, 66, 66))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDeleteLicense)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateLicense)
                        .addGap(68, 68, 68))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(231, 231, 231)
                                .addComponent(jLabel2)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 213, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(24, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteLicense)
                            .addComponent(btnUpdateLicense))
                        .addGap(47, 47, 47)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteTraining)
                    .addComponent(btnUpdateTraining))
                .addGap(83, 83, 83))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteTrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTrainingActionPerformed
        // TODO add your handling code here:

        int RowIndex = tblTraining.getSelectedRow();

        if (RowIndex < 0) {

            JOptionPane.showMessageDialog(this, "Please select a row to delete!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblTraining.getModel();
        Training selectedRow = (Training) model.getValueAt(RowIndex, 0);

        EcoSystem.getInstance().getTrainingDirectory().deleteRows(selectedRow);

        JOptionPane.showMessageDialog(this, "Selected record is deleted!");

        populateTableTraining();

    }//GEN-LAST:event_btnDeleteTrainingActionPerformed

    private void btnDeleteLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteLicenseActionPerformed
        // TODO add your handling code here:

        int RowIndex = tblLicense.getSelectedRow();

        if (RowIndex < 0) {

            JOptionPane.showMessageDialog(this, "Please select a row to delete!");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblLicense.getModel();
        License selectedRow = (License) model.getValueAt(RowIndex, 0);

        EcoSystem.getInstance().getLicenseDirectory().deleteRows(selectedRow);

        JOptionPane.showMessageDialog(this, "Selected record is deleted!");

        populateTableLicense();

    }//GEN-LAST:event_btnDeleteLicenseActionPerformed

    private void btnUpdateLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateLicenseActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tblLicense.getModel();
        int rowIndex = tblLicense.getSelectedRow();
        int colIndex = 0;
        int colIndex1 = tblLicense.getSelectedColumn();

        Vector dataVector = model.getDataVector();
        Vector elementAt = (Vector) dataVector.elementAt(rowIndex);

//        License licenseDetails = null;
//        if (colIndex1 == 0) {
//            licenseDetails = EcoSystem.getInstance().getLicenseDirectory().getLicense().stream().filter(item -> elementAt.get(0).equals(item.getLicenseId())).findFirst().orElse(null);
//        }
        //LicenseOrganization res = (LicenseOrganization) model.getValueAt(rowIndex, colIndex);
        //!elementAt.get(1).toString().isEmpty() && 
        if (!elementAt.get(2).toString().isEmpty()
                && !elementAt.get(3).toString().isEmpty() && !elementAt.get(4).toString().isEmpty()
                && !elementAt.get(5).toString().isEmpty()) {

            License res = (License) elementAt.get(0);
            //res.setLicenseId(Integer.parseInt(elementAt.get(1).toString()));
            res.setIssueNumber(Long.parseLong(elementAt.get(2).toString()));
            res.setLicenseName(elementAt.get(3).toString());
//                Date issueDt = new SimpleDateFormat("dd/MM/yyyy").parse(elementAt.get(4).toString());
//                Date expDt = new SimpleDateFormat("dd/MM/yyyy").parse(elementAt.get(5).toString());
//                res.setIssueDate(issueDt);
//                res.setExpiryDate(expDt);

            JOptionPane.showMessageDialog(this, "Value updated successfully!");

        } else {
            JOptionPane.showMessageDialog(this, "Please enter all values.");

        }


    }//GEN-LAST:event_btnUpdateLicenseActionPerformed

    private void btnUpdateTrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTrainingActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) tblTraining.getModel();
        int rowIndex = tblTraining.getSelectedRow();
        int colIndex = 0;
        int colIndex1 = tblTraining.getSelectedColumn();

        Vector dataVector = model.getDataVector();
        Vector elementAt = (Vector) dataVector.elementAt(rowIndex);

        Training trainingDetails = null;
        if (colIndex1 == 0) {
            trainingDetails = EcoSystem.getInstance().getTrainingDirectory().getTraining().stream().filter(item -> elementAt.get(0).equals(item.getPatientIdentity())).findFirst().orElse(null);
        }

        //LicenseOrganization res = (LicenseOrganization) model.getValueAt(rowIndex, colIndex);
        if (!elementAt.get(1).toString().isEmpty() && !elementAt.get(2).toString().isEmpty()
                && !elementAt.get(3).toString().isEmpty() && !elementAt.get(4).toString().isEmpty()
                && !elementAt.get(5).toString().isEmpty() && !elementAt.get(6).toString().isEmpty() && !elementAt.get(7).toString().isEmpty()
                && !elementAt.get(8).toString().isEmpty()) {

            Training res = (Training) elementAt.get(0);
            res.setPatientIdentity(Boolean.parseBoolean(elementAt.get(1).toString()));
            res.setCrossMatching(Boolean.parseBoolean(elementAt.get(2).toString()));
            res.setCompatibility(Boolean.parseBoolean(elementAt.get(3).toString()));
            res.setProblems(Boolean.parseBoolean(elementAt.get(4).toString()));
            res.setTroubleShooting(Boolean.parseBoolean(elementAt.get(5).toString()));
            res.setIssueOfBlood(Boolean.parseBoolean(elementAt.get(6).toString()));
            res.setTransfusionReactions(Boolean.parseBoolean(elementAt.get(7).toString()));
            res.setBagDisposal(Boolean.parseBoolean(elementAt.get(8).toString()));

            JOptionPane.showMessageDialog(this, "Value updated successfully!");

        } else {
            JOptionPane.showMessageDialog(this, "Please enter all values.");

        }


    }//GEN-LAST:event_btnUpdateTrainingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteLicense;
    private javax.swing.JButton btnDeleteTraining;
    private javax.swing.JButton btnUpdateLicense;
    private javax.swing.JButton btnUpdateTraining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblLicense;
    private javax.swing.JTable tblTraining;
    // End of variables declaration//GEN-END:variables

    private void populateTableLicense() {
        DefaultTableModel model = (DefaultTableModel) tblLicense.getModel();
        model.setRowCount(0);
        for (Organizations o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o.getName().equalsIgnoreCase("License Organization")) {
                LicenseOrganization licOrg = (LicenseOrganization) o;
                for (License l : licOrg.getLicenseDirectory().getLicense()) {

                    Object[] col = new Object[6];
                    col[0] = l;
                    col[1] = l.getLicenseId();
                    col[2] = l.getIssueNumber();
                    col[3] = l.getLicenseName();
                    col[4] = l.getIssueDate();
                    col[5] = l.getExpiryDate();

                    model.addRow(col);

                }
                break;
            }
        }
    }

    private void populateTableTraining() {
        DefaultTableModel model = (DefaultTableModel) tblTraining.getModel();
        model.setRowCount(0);
        List<Training> training = EcoSystem.getInstance().getTrainingDirectory().getTraining();
        for (Organizations o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o.getName().equalsIgnoreCase("Training Organization")) {
                TrainingOrganization trainingOrganization = (TrainingOrganization) o;
                for (Training t : trainingOrganization.getTrainingDirectory().getTraining()) {

                    Object[] col = new Object[9];
                    col[0] = t;
                    col[1] = t.getPatientIdentity();
                    col[2] = t.getCrossMatching();
                    col[3] = t.getCompatibility();
                    col[4] = t.getProblems();
                    col[5] = t.getTroubleShooting();
                    col[6] = t.getIssueOfBlood();
                    col[7] = t.getTransfusionReactions();
                    col[8] = t.getBagDisposal();

                    model.addRow(col);

                }
                break;
            }
        }

    }

}
